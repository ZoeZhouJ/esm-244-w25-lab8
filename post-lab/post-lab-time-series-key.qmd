---
title: "Post Lab 2 Practice"
author: "Nathan Grimes"
format: 
  html:
    code-fold: true
    theme: yeti
    embed-resources: true
execute: 
  echo: true
  warning: false
  message: false
---

## Load Data and attach Packages

```{r}

library(tidyverse)
library(tsibble)
library(feasts)
library(fable)
# load data

mauna<-read_csv(here::here("data","co2_mauna_loa.csv")) %>% 
  mutate(date = tsibble::yearmonth(date)) %>% 
  as_tsibble()
```

## Exploratory Plots

I'm having a bit of fun with the colors to show how you can add different themes to plots rather than just base colors. These are by no means the correct ones to show what is on the graphs, but it's more for R practice. I used the color palette of my favorite Wes Anderson film "The Life Aquatic with Steve Zissou1", but there are other fun ones like the `tayloRswift` package that takes the color themes of all her albums and creates palettes from them.

```{r}
#| label: fig-season
#| fig-cap: "Monthly mean global carbon dioxide concentrations from 1958 to 2023. Variation exists between season and months shown by the steady rise in concentrations into the summer months. The seasonality persits throughout the timeframe. Average concentrations ubiquitiously rise each year shown by the steady change from early years (blue) to more recent years (red)."

#Make a Wes Anderson theme color palette
my_col=wesanderson::wes_palette("Zissou1",2023-1958,type="continuous")

mauna %>% 
  gg_season(y=co2_mean,pal=my_col)+
  theme_minimal()+
  labs(x="",y="Average Global Carbon Dioxide\n Concentrations (ppm)",color="Years")
```

```{r}
#| label: fig-subseries
#| fig-cap: "Subseries plot of monthly mean global carbon dioxide concentrations. Black lines indicate steady rise in CO2 concentrations. The horizontal blue line indicates the average for each month"


mauna %>% 
  gg_subseries(co2_mean)+
  labs(x="",y="Average Global Carbon Dioxide\n Concentrations (ppm)")
  
```

## Analysis Part 2:

We have a clear additive trend because it steadily increases over the years. Seasonality exists, but seems pretty stable so additive is also applicable.

```{r}
#| label: fig-forecast
#| fig-cap: "Forecasted data in blue with error bars at the 80 and 95% levels"

mauna_fit<-mauna %>% 
  model(ETS(co2_mean~season(method="A")+trend(method="A")))


mauna_forecast<-mauna_fit %>% 
  forecast(h="20 years")

mauna_forecast %>% 
  autoplot(mauna)+
    theme_minimal()+
  labs(x="",y="Average Global Carbon Dioxide\n Concentrations (ppm)")
```

Let's see how well our model fit the data. Get predictions using the broom package on our model and data. A neat trick when handling graphs from different sources is to specify named aesthetic objects. This allows us to sometimes avoid `pivot_longer` and is useful when making very complex plots with multiple objects. In ggplot `aes()` give a name to the thing we're graphing. Then you can use a color palette to refer back to that named object. It's not always clear which order ggplot is connecting colors to objects. But here it's always my predicted will be what I say and the observed will also always be explicit.

```{r}
#| label: fig-predicted
#| fig-cap: "Observed in black vs the fitted in red for the time series"
# Plot against broom fit models

mauna_predicted <- broom::augment(mauna_fit)

ggplot(data=mauna_predicted)+
  geom_line(aes(x=date,y=co2_mean,color="Observed"))+
  geom_line(aes(x=date,y=.fitted,color="Predicted"))+
  scale_color_manual(name="",values=c('Observed'='black','Predicted'='red'))+
  theme_minimal()+
  labs(x="",y="Average Global Carbon Dioxide\n Concentrations (ppm)")

```

Now show a histogram of the residuals.

```{r}
#| label: fig-hist
#| fig-cap: "Histogram of residuals from ETS model and observed data. Residuals visually maintain a normal distribution with small standard deviations and is centered at 1. These indicate our model performance is consistent with what we would expect."

ggplot(mauna_predicted,aes(x=.resid))+
  geom_histogram()+
  theme_minimal()+
  labs(x="Residuals",y="Count")
  
```

### Optional analysis

Many ways to go about doing this. I'm first going to create a year column from our dates so i can filter out years less than 2004 to pass into our ETS model. Like before I will forecast 20 years into the future. Then I will plot both the predicted pathway and the actual data. As an extra step to quantify how well they fit together I am also going to find the root mean squared error ($RMSE=\sqrt\frac{\sum(\hat{y_i}-y_i)^2}{n}$). Later in the class we will use RMSE frequently to compare model performance. Introducing the idea now so you feel more comfortable with it later on.

```{r}
mauna_2003<-mauna %>% 
  mutate(year = lubridate::year(date)) %>% 
  filter(year<2004)

mauna_post<-mauna %>% 
  mutate(year = lubridate::year(date)) %>% 
  filter(year>=2004)

mauna_2003_fit<-mauna_2003%>% 
  model(ETS(co2_mean~season(method="A")+trend(method="A")))

mauna_2003_forecast<-mauna_2003_fit %>% 
  forecast(h="20 years")
```

```{r}
#| label: fig-forecast2003
#| fig-cap: "Forecasting with just the 2003 data (black) understates the rapid and potentially accelerating rise in Carbon Dioxide. Actual observations from 2004 to 2023 in red are solidly in the 95% confidence intervals for predictions in the 2020s. That might be a problem, but I'm a fish guy"
mauna_2003_forecast %>% 
  autoplot(mauna_2003)+
  geom_line(data=mauna_post,aes(x=date,y=co2_mean),color="red",linewidth=.8)+
  theme_minimal()+
  labs(x="",y="Average Global Carbon Dioxide\n Concentrations (ppm)")
```

```{r}
# Optional optional RMSE calculations

# I like to make a function a define the predicted yhat values and the observed yi values
rmse<-function(ob,pred){
  out=sqrt(mean((pred-ob)^2,na.rm=T))
  return(out)
}

rmse(mauna_2003_forecast$.mean,mauna_post$co2_mean)
```

Without context the RMSE value of 5.67 means very little. If we compare to other underlying models it could yield more interesting results. Like does making seasonality multiplicative lead to better performance? Let's quickly see.

```{r}

mult<-mauna_2003%>% 
  model(ETS(co2_mean~season(method="M")+trend(method="A")))

mult_forecast<-mult %>% 
  forecast(h="20 years")

rmse(mult_forecast$.mean,mauna_post$co2_mean)
```

It looks like making the season multiplicative does lead to better model performance. How does that look on the graph?

```{r}
#| label: fig-forecastm
#| fig-cap: ETS with a multiplicative seasonal trend
mult_forecast %>% 
  autoplot(mauna_2003)+
  geom_line(data=mauna_post,aes(x=date,y=co2_mean),color="red",linewidth=.8)+
  theme_minimal()+
  labs(x="",y="Average Global Carbon Dioxide\n Concentrations (ppm)")
```

We get huge error bars but a better prediction of mean values.
